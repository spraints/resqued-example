#!/bin/bash
#/ Usage: run VERSION...
#/ Specify at least two versions.
#/ VERSION may use dotted notation (e.g. "0.8.5").
#/ VERSION may be a git revision (e.g. "--git 0123abc")
#/ VERSION may be a path (e.g. "--path ../resqued")
#/ VERSION may be a sleep command (e.g. "--sleep 10")

set -e
set -o nounset

ROOT="$(cd "$(dirname "$0")"; pwd -P)"
WORK="${ROOT}/work"
GEMFILE="${WORK}/Gemfile"
PIDFILE="${WORK}/resqued.pid"
LOGFILE="${ROOT}/log/resqued.log"
CONFIG="${ROOT}/../basic/config.rb"
PUSH="${ROOT}/../basic/push.rb"

start_args=

main() {
  mkdir -p "${WORK}"

  if [ -e "${LOGFILE}" ]; then
    mv "${LOGFILE}" "${LOGFILE}.1"
  else
    mkdir -p "${ROOT}/log"
  fi

  trap shutdown EXIT

  warmup_script=true
  run_script=true

  local start_cmd=start
  local version
  while [ $# -gt 0 ]; do
    case "$1" in
      --sleep)
        run_script="$run_script;
          echo ==> Sleeping $2;
          sleep $2"
        shift; shift
        ;;

      --git|--path)
        warmup_script="$warmup_script; install_resqued $1 $2"
        run_script="$run_script;
          install_resqued $1 $2;
          $start_cmd;
          push_job;
          show_processes"
        start_cmd=restart
        shift; shift
        ;;

      0.*)
        warmup_script="$warmup_script; install_resqued --gem $1"
        run_script="$run_script;
          install_resqued --gem $1;
          $start_cmd;
          push_job;
          show_processes"
        start_cmd=restart
        shift
        ;;

      --again)
        if [ $start_cmd = start ]; then
          echo "$1: not allowed as first command"
          exit 1
        fi
        run_script="$run_script;
          echo '==> Use same version of resqued';
          $start_cmd;
          push_job;
          show_processes"
        shift
        ;;

      --no-exec-on-hup|--fast-exit)
        start_args="$start_args $1"
        shift
        ;;

      *)
        echo "$1: unrecognized arg"
        exit 1
        ;;
    esac
  done

  eval "$warmup_script"
  eval "$run_script"
}

install_resqued() {
  echo "==> Installing resqued $*"
  (
    printf 'source "https://rubygems.org"\n'
    case "$1" in
      --gem)
        printf 'gem "resqued", "%s"\n' "$2"
        ;;
      --git)
        printf 'gem "resqued", :git => "https://github.com/spraints/resqued", :ref => "%s"\n' "$2"
        ;;
      --path)
        local path="$(cd "$2"; pwd -P)"
        printf 'gem "resqued", :path => "%s"\n' "$path"
        ;;
    esac
  ) > "${GEMFILE}"
  (cd "${WORK}" && (bundle check >&/dev/null || time bundle --path .bundle --binstubs bin))
}

start() {
  echo "==> Starting resqued"
  "${WORK}/bin/resqued" --daemonize --pidfile "${PIDFILE}" --logfile "${LOGFILE}" $start_args "${CONFIG}"
  sleep 2
  kill -0 "$(cat "${PIDFILE}")"
}

restart() {
  echo "==> Restarting resqued"
  kill -HUP "$(cat "${PIDFILE}")"
  sleep 1
  kill -0 "$(cat "${PIDFILE}")"
}

shutdown() {
  if [ -e "${PIDFILE}" ]; then
    echo "==> Stopping resqued"
    kill -QUIT "$(cat "${PIDFILE}")" || true
    rm -f "${PIDFILE}"
    sleep 1
    show_processes
  fi
}

push_job() {
  echo "==> Pushing a 10s job [$(date)]"
  (cd "${WORK}" && bundle exec ruby "${PUSH}" 8)
  sleep 1
}

show_processes() {
  echo "==> Processes"
  date
  local psargs=
  if [ "$(uname -s)" = "Linux" ]; then
    psargs=-H
  fi
  ps axo pid,ppid,etime,args $psargs | grep [r]esque || true
}

main "$@"
